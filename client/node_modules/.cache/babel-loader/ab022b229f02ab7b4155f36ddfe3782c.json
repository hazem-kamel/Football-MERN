{"ast":null,"code":"var _jsxFileName = \"/Users/hazem/Desktop/Web-Development/football/Frontend/src/components/PredictComments/Predict.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { addCommentAction, getCommentsAction } from \"../../Redux/actions/Actions\";\nimport \"./Predict.css\";\n\nconst Predict = props => {\n  const [commentMessage, setCommentMessage] = useState(\"\");\n  const session = sessionStorage.getItem(\"storedSession\");\n  const history = useHistory();\n  let match = props.location.pathname.slice(10);\n  useEffect(() => {\n    if (!session) {\n      history.push(\"/login\");\n    }\n\n    props.fetchComments(match);\n  }, []);\n  console.log(props.prevComments.keys);\n\n  const submitComment = () => {\n    let match = props.location.pathname.slice(10);\n    let username = session;\n    let commentData = {\n      match: match,\n      username: username,\n      comment: commentMessage\n    };\n    props.comment(commentData);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"comments-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"add-comment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onChange: e => setCommentMessage(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: e => submitComment(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"comment\")), React.createElement(\"div\", {\n    className: \"prev-comments\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, props.prevComments === \"No Comments\" ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"No Comments Yet\") : Object.keys(props.prevComments).map((comment, key) => {\n    return React.createElement(\"div\", {\n      className: \"comment\",\n      id: comment._id,\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, comment.username), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, comment.comment), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, comment.created));\n  })));\n};\n\nconst mapStateToProps = state => ({\n  prevComments: state.Comments\n});\n\nconst mapDispatchToProps = dispatch => ({\n  comment: commentData => dispatch(addCommentAction(commentData)),\n  fetchComments: match => dispatch(getCommentsAction(match))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Predict);","map":{"version":3,"sources":["/Users/hazem/Desktop/Web-Development/football/Frontend/src/components/PredictComments/Predict.js"],"names":["React","useState","useEffect","connect","useHistory","addCommentAction","getCommentsAction","Predict","props","commentMessage","setCommentMessage","session","sessionStorage","getItem","history","match","location","pathname","slice","push","fetchComments","console","log","prevComments","keys","submitComment","username","commentData","comment","e","target","value","Object","map","key","_id","created","mapStateToProps","state","Comments","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  addCommentAction,\n  getCommentsAction,\n} from \"../../Redux/actions/Actions\";\nimport \"./Predict.css\";\nconst Predict = (props) => {\n  const [commentMessage, setCommentMessage] = useState(\"\");\n  const session = sessionStorage.getItem(\"storedSession\");\n  const history = useHistory();\n  let match = props.location.pathname.slice(10);\n  useEffect(() => {\n    if (!session) {\n      history.push(\"/login\");\n    }\n    props.fetchComments(match);\n  }, []);\n  console.log(props.prevComments.keys);\n  const submitComment = () => {\n    let match = props.location.pathname.slice(10);\n    let username = session;\n    let commentData = {\n      match: match,\n      username: username,\n      comment: commentMessage,\n    };\n    props.comment(commentData);\n  };\n\n  return (\n    <div className=\"comments-section\">\n      <div className=\"add-comment\">\n        <input onChange={(e) => setCommentMessage(e.target.value)}></input>\n        <button onClick={(e) => submitComment()}>comment</button>\n      </div>\n      <div className=\"prev-comments\">\n        {props.prevComments === \"No Comments\" ? (\n          <p>No Comments Yet</p>\n        ) : (\n          Object.keys(props.prevComments).map((comment, key) => {\n            return (\n              <div className=\"comment\" id={comment._id} key={key}>\n                <p>{comment.username}</p>\n                <p>{comment.comment}</p>\n                <p>{comment.created}</p>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  prevComments: state.Comments,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  comment: (commentData) => dispatch(addCommentAction(commentData)),\n  fetchComments: (match) => dispatch(getCommentsAction(match)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Predict);\n"]},"metadata":{},"sourceType":"module"}